{"mappings":";;ACMA,eAAe,cAAc,CAAC;IAG5B,UAAU,eAAe;QACvB,WAAW,CAAC,EAAE,MAAM,CAAC;QACrB,OAAO,CAAC,EAAE,MAAM,CAAC;QACjB,aAAa,CAAC,EAAE,MAAM,CAAC;QACvB,YAAY,CAAC,EAAE,MAAM,CAAC;KACvB;CACF;AAED,uBAA8B,WAAW,GAAG;IAC1C,YAAY,EAAE,MAAM,CAAC;IACrB,YAAY,EAAE,OAAO,CAAC;IACtB,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;ACXF,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAEvD,YAAY,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAEhD;gBAG+B,MAAM,EAAE,eAAe;IAEpD,YAAY,4BAET,cAAc,CASa;IAE9B,oBAAoB,2BAAuC,cAAc,CAS3C;IAE9B,aAAa,4BAAwC,cAAc,CAWrC;IAE9B,UAAU,aAAc,oBAAoB,yBAG9B;IAEd,gBAAgB,aACH,oBAAoB,KAAG,cAAc,CAqB9C;IAEJ,iBAAiB,YACN,cAAc,WACf,oBAAoB,KAC3B,cAAc,CAQa;IAE9B,YAAY,mFAEC,yBAAyB,mFAE3B,oBAAoB,oJAQD;IAa9B,OAAO,KAAK,kBAAkB,GAS7B;CAOF","sources":["packages/next/src/src/storage.ts","packages/next/src/src/types.ts","packages/next/src/src/index.ts","packages/next/src/index.ts"],"sourcesContent":[null,null,null,"import type { IncomingMessage } from 'http';\n\nimport type { GetContextParameters } from '@logto/node';\nimport NodeClient from '@logto/node';\nimport { withIronSessionApiRoute, withIronSessionSsr } from 'iron-session/next';\nimport type { GetServerSidePropsContext, GetServerSidePropsResult, NextApiHandler } from 'next';\n\nimport NextStorage from './storage';\nimport type { LogtoNextConfig } from './types';\n\nexport { ReservedScope, UserScope } from '@logto/node';\n\nexport type { LogtoContext } from '@logto/node';\n\nexport default class LogtoClient {\n  private navigateUrl?: string;\n  private storage?: NextStorage;\n  constructor(private readonly config: LogtoNextConfig) {}\n\n  handleSignIn = (\n    redirectUri = `${this.config.baseUrl}/api/logto/sign-in-callback`\n  ): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n      await nodeClient.signIn(redirectUri);\n      await this.storage?.save();\n\n      if (this.navigateUrl) {\n        response.redirect(this.navigateUrl);\n      }\n    }, this.ironSessionConfigs);\n\n  handleSignInCallback = (redirectTo = this.config.baseUrl): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n\n      if (request.url) {\n        await nodeClient.handleSignInCallback(`${this.config.baseUrl}${request.url}`);\n        await this.storage?.save();\n        response.redirect(redirectTo);\n      }\n    }, this.ironSessionConfigs);\n\n  handleSignOut = (redirectUri = this.config.baseUrl): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n      await nodeClient.signOut(redirectUri);\n\n      request.session.destroy();\n      await this.storage?.save();\n\n      if (this.navigateUrl) {\n        response.redirect(this.navigateUrl);\n      }\n    }, this.ironSessionConfigs);\n\n  handleUser = (configs?: GetContextParameters) =>\n    this.withLogtoApiRoute((request, response) => {\n      response.json(request.user);\n    }, configs);\n\n  handleAuthRoutes =\n    (configs?: GetContextParameters): NextApiHandler =>\n    (request, response) => {\n      const { action } = request.query;\n\n      if (action === 'sign-in') {\n        return this.handleSignIn()(request, response);\n      }\n\n      if (action === 'sign-in-callback') {\n        return this.handleSignInCallback()(request, response);\n      }\n\n      if (action === 'sign-out') {\n        return this.handleSignOut()(request, response);\n      }\n\n      if (action === 'user') {\n        return this.handleUser(configs)(request, response);\n      }\n\n      response.status(404).end();\n    };\n\n  withLogtoApiRoute = (\n    handler: NextApiHandler,\n    config: GetContextParameters = {}\n  ): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const user = await this.getLogtoUserFromRequest(request, config);\n\n      // eslint-disable-next-line @silverhand/fp/no-mutating-methods\n      Object.defineProperty(request, 'user', { enumerable: true, get: () => user });\n\n      return handler(request, response);\n    }, this.ironSessionConfigs);\n\n  withLogtoSsr = <P extends Record<string, unknown> = Record<string, unknown>>(\n    handler: (\n      context: GetServerSidePropsContext\n    ) => GetServerSidePropsResult<P> | Promise<GetServerSidePropsResult<P>>,\n    configs: GetContextParameters = {}\n  ) =>\n    withIronSessionSsr(async (context) => {\n      const user = await this.getLogtoUserFromRequest(context.req, configs);\n      // eslint-disable-next-line @silverhand/fp/no-mutating-methods\n      Object.defineProperty(context.req, 'user', { enumerable: true, get: () => user });\n\n      return handler(context);\n    }, this.ironSessionConfigs);\n\n  private createNodeClient(request: IncomingMessage) {\n    this.storage = new NextStorage(request);\n\n    return new NodeClient(this.config, {\n      storage: this.storage,\n      navigate: (url) => {\n        this.navigateUrl = url;\n      },\n    });\n  }\n\n  private get ironSessionConfigs() {\n    return {\n      cookieName: `logto:${this.config.appId}`,\n      password: this.config.cookieSecret,\n      cookieOptions: {\n        secure: this.config.cookieSecure,\n        maxAge: 14 * 24 * 60 * 60,\n      },\n    };\n  }\n\n  private async getLogtoUserFromRequest(request: IncomingMessage, configs: GetContextParameters) {\n    const nodeClient = this.createNodeClient(request);\n\n    return nodeClient.getContext(configs);\n  }\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}