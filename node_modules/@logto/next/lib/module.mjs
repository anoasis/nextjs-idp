import $a8eQ2$logtonode, {ReservedScope as $7d6712a39300ba99$re_export$ReservedScope, UserScope as $7d6712a39300ba99$re_export$UserScope} from "@logto/node";
import {withIronSessionApiRoute as $a8eQ2$withIronSessionApiRoute, withIronSessionSsr as $a8eQ2$withIronSessionSsr} from "iron-session/next";



class $8fa7922f9b3d24ed$export$2e2bcd8739ae039 {
    constructor(request){
        this.request = request;
        this.sessionChanged = false;
    }
    async setItem(key, value) {
        this.request.session[key] = value;
        this.sessionChanged = true;
    }
    async getItem(key) {
        const value = this.request.session[key];
        if (value === undefined) return null;
        return String(value);
    }
    async removeItem(key) {
        this.request.session[key] = undefined;
        this.sessionChanged = true;
    }
    async save() {
        if (!this.sessionChanged) return;
        await this.request.session.save();
        this.sessionChanged = false;
    }
}



class $7d6712a39300ba99$export$2e2bcd8739ae039 {
    constructor(config){
        this.config = config;
        this.handleSignIn = (redirectUri = `${this.config.baseUrl}/api/logto/sign-in-callback`)=>(0, $a8eQ2$withIronSessionApiRoute)(async (request, response)=>{
                const nodeClient = this.createNodeClient(request);
                await nodeClient.signIn(redirectUri);
                await this.storage?.save();
                if (this.navigateUrl) response.redirect(this.navigateUrl);
            }, this.ironSessionConfigs);
        this.handleSignInCallback = (redirectTo = this.config.baseUrl)=>(0, $a8eQ2$withIronSessionApiRoute)(async (request, response)=>{
                const nodeClient = this.createNodeClient(request);
                if (request.url) {
                    await nodeClient.handleSignInCallback(`${this.config.baseUrl}${request.url}`);
                    await this.storage?.save();
                    response.redirect(redirectTo);
                }
            }, this.ironSessionConfigs);
        this.handleSignOut = (redirectUri = this.config.baseUrl)=>(0, $a8eQ2$withIronSessionApiRoute)(async (request, response)=>{
                const nodeClient = this.createNodeClient(request);
                await nodeClient.signOut(redirectUri);
                request.session.destroy();
                await this.storage?.save();
                if (this.navigateUrl) response.redirect(this.navigateUrl);
            }, this.ironSessionConfigs);
        this.handleUser = (configs)=>this.withLogtoApiRoute((request, response)=>{
                response.json(request.user);
            }, configs);
        this.handleAuthRoutes = (configs)=>(request, response)=>{
                const { action: action  } = request.query;
                if (action === "sign-in") return this.handleSignIn()(request, response);
                if (action === "sign-in-callback") return this.handleSignInCallback()(request, response);
                if (action === "sign-out") return this.handleSignOut()(request, response);
                if (action === "user") return this.handleUser(configs)(request, response);
                response.status(404).end();
            };
        this.withLogtoApiRoute = (handler, config = {})=>(0, $a8eQ2$withIronSessionApiRoute)(async (request, response)=>{
                const user = await this.getLogtoUserFromRequest(request, config);
                // eslint-disable-next-line @silverhand/fp/no-mutating-methods
                Object.defineProperty(request, "user", {
                    enumerable: true,
                    get: ()=>user
                });
                return handler(request, response);
            }, this.ironSessionConfigs);
        this.withLogtoSsr = (handler, configs = {})=>(0, $a8eQ2$withIronSessionSsr)(async (context)=>{
                const user = await this.getLogtoUserFromRequest(context.req, configs);
                // eslint-disable-next-line @silverhand/fp/no-mutating-methods
                Object.defineProperty(context.req, "user", {
                    enumerable: true,
                    get: ()=>user
                });
                return handler(context);
            }, this.ironSessionConfigs);
    }
    createNodeClient(request) {
        this.storage = new (0, $8fa7922f9b3d24ed$export$2e2bcd8739ae039)(request);
        return new (0, $a8eQ2$logtonode)(this.config, {
            storage: this.storage,
            navigate: (url)=>{
                this.navigateUrl = url;
            }
        });
    }
    get ironSessionConfigs() {
        return {
            cookieName: `logto:${this.config.appId}`,
            password: this.config.cookieSecret,
            cookieOptions: {
                secure: this.config.cookieSecure,
                maxAge: 1209600
            }
        };
    }
    async getLogtoUserFromRequest(request, configs) {
        const nodeClient = this.createNodeClient(request);
        return nodeClient.getContext(configs);
    }
}


export {$7d6712a39300ba99$export$2e2bcd8739ae039 as default, $7d6712a39300ba99$re_export$ReservedScope as ReservedScope, $7d6712a39300ba99$re_export$UserScope as UserScope};
//# sourceMappingURL=module.mjs.map
