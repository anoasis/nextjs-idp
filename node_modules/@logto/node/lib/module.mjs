import {Buffer as $jetHk$Buffer} from "buffer";
import $jetHk$logtoclient, {createRequester as $jetHk$createRequester, LogtoError as $0aca7ca5e7992ee0$re_export$LogtoError, OidcError as $0aca7ca5e7992ee0$re_export$OidcError, Prompt as $0aca7ca5e7992ee0$re_export$Prompt, LogtoRequestError as $0aca7ca5e7992ee0$re_export$LogtoRequestError, LogtoClientError as $0aca7ca5e7992ee0$re_export$LogtoClientError, ReservedScope as $0aca7ca5e7992ee0$re_export$ReservedScope, UserScope as $0aca7ca5e7992ee0$re_export$UserScope} from "@logto/client";
import {conditional as $jetHk$conditional} from "@silverhand/essentials";
import $jetHk$nodefetch from "node-fetch";
import {randomFillSync as $jetHk$randomFillSync, createHash as $jetHk$createHash} from "crypto";
import {fromUint8Array as $jetHk$fromUint8Array} from "js-base64";




/** @link [Proof Key for Code Exchange by OAuth Public Clients](https://datatracker.ietf.org/doc/html/rfc7636) */ 

/**
 * @param length The length of the raw random data.
 */ const $91cf1946314e24ae$var$generateRandomString = (length = 64)=>(0, $jetHk$fromUint8Array)((0, $jetHk$randomFillSync)(new Uint8Array(length)), true);
const $91cf1946314e24ae$export$9ccd2716e53a229b = ()=>$91cf1946314e24ae$var$generateRandomString();
const $91cf1946314e24ae$export$cf1891f923f5943a = ()=>$91cf1946314e24ae$var$generateRandomString();
const $91cf1946314e24ae$export$414b01b1f867308a = async (codeVerifier)=>{
    const encodedCodeVerifier = new TextEncoder().encode(codeVerifier);
    const hash = (0, $jetHk$createHash)("sha256");
    hash.update(encodedCodeVerifier);
    const codeChallenge = hash.digest();
    return (0, $jetHk$fromUint8Array)(codeChallenge, true);
};




var $0aca7ca5e7992ee0$require$Buffer = $jetHk$Buffer;
class $0aca7ca5e7992ee0$export$2e2bcd8739ae039 extends (0, $jetHk$logtoclient) {
    constructor(config, adapter){
        super(config, {
            ...adapter,
            requester: (0, $jetHk$createRequester)(config.appSecret ? async (...args)=>{
                const [input, init] = args;
                return (0, $jetHk$nodefetch)(input, {
                    ...init,
                    headers: {
                        Authorization: `basic ${$0aca7ca5e7992ee0$require$Buffer.from(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                        `${config.appId}:${config.appSecret}`, "utf8").toString("base64")}`,
                        ...init?.headers
                    }
                });
            } : (0, $jetHk$nodefetch)),
            generateCodeChallenge: $91cf1946314e24ae$export$414b01b1f867308a,
            generateCodeVerifier: $91cf1946314e24ae$export$cf1891f923f5943a,
            generateState: $91cf1946314e24ae$export$9ccd2716e53a229b
        });
    }
    getContext = async ({ getAccessToken: getAccessToken , resource: resource , fetchUserInfo: fetchUserInfo  } = {})=>{
        const isAuthenticated = await this.isAuthenticated();
        if (!isAuthenticated) return {
            isAuthenticated: isAuthenticated
        };
        const claims = await this.getIdTokenClaims();
        if (!getAccessToken) return {
            isAuthenticated: isAuthenticated,
            claims: claims,
            userInfo: (0, $jetHk$conditional)(fetchUserInfo && await this.fetchUserInfo())
        };
        try {
            const accessToken = await this.getAccessToken(resource);
            return {
                isAuthenticated: isAuthenticated,
                claims: await this.getIdTokenClaims(),
                userInfo: (0, $jetHk$conditional)(fetchUserInfo && await this.fetchUserInfo()),
                accessToken: accessToken
            };
        } catch  {
            return {
                isAuthenticated: false
            };
        }
    };
}


export {$0aca7ca5e7992ee0$export$2e2bcd8739ae039 as default, $0aca7ca5e7992ee0$re_export$LogtoError as LogtoError, $0aca7ca5e7992ee0$re_export$OidcError as OidcError, $0aca7ca5e7992ee0$re_export$Prompt as Prompt, $0aca7ca5e7992ee0$re_export$LogtoRequestError as LogtoRequestError, $0aca7ca5e7992ee0$re_export$LogtoClientError as LogtoClientError, $0aca7ca5e7992ee0$re_export$ReservedScope as ReservedScope, $0aca7ca5e7992ee0$re_export$UserScope as UserScope};
//# sourceMappingURL=module.mjs.map
