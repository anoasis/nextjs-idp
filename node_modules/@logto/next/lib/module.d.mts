import { LogtoConfig, GetContextParameters } from "@logto/node";
import { GetServerSidePropsContext, GetServerSidePropsResult, NextApiHandler } from "next";
declare module 'iron-session' {
    interface IronSessionData {
        accessToken?: string;
        idToken?: string;
        signInSession?: string;
        refreshToken?: string;
    }
}
type LogtoNextConfig = LogtoConfig & {
    cookieSecret: string;
    cookieSecure: boolean;
    baseUrl: string;
};
export { ReservedScope, UserScope } from '@logto/node';
export type { LogtoContext } from '@logto/node';
export default class LogtoClient {
    constructor(config: LogtoNextConfig);
    handleSignIn: (redirectUri?: string) => NextApiHandler;
    handleSignInCallback: (redirectTo?: string) => NextApiHandler;
    handleSignOut: (redirectUri?: string) => NextApiHandler;
    handleUser: (configs?: GetContextParameters) => NextApiHandler<any>;
    handleAuthRoutes: (configs?: GetContextParameters) => NextApiHandler;
    withLogtoApiRoute: (handler: NextApiHandler, config?: GetContextParameters) => NextApiHandler;
    withLogtoSsr: <P extends Record<string, unknown> = Record<string, unknown>>(handler: (context: GetServerSidePropsContext) => GetServerSidePropsResult<P> | Promise<GetServerSidePropsResult<P>>, configs?: GetContextParameters) => (context: GetServerSidePropsContext<import("querystring").ParsedUrlQuery, import("next").PreviewData>) => Promise<GetServerSidePropsResult<P>>;
    private get ironSessionConfigs();
}

//# sourceMappingURL=index.d.ts.map
