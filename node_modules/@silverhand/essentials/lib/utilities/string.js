"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.urlSafeBase64 = exports.toTitle = void 0;
const env_1 = require("./env");
function toTitle(string) {
    if (typeof string !== 'string') {
        throw new TypeError('Expected a string');
    }
    return string
        .toLowerCase()
        .replace(/(?:^|\s|-)\S/g, (value) => value.toUpperCase())
        .replace(/-/g, ' ');
}
exports.toTitle = toTitle;
/**
 * RFC 4648 section 5: base64url (URL- and filename-safe standard)
 * @link https://datatracker.ietf.org/doc/html/rfc4648#section-5
 */
const replaceNonUrlSafeCharacters = (base64String) => base64String.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/g, '');
const restoreNonUrlSafeCharacters = (base64String) => base64String.replace(/-/g, '+').replace(/_/g, '/');
exports.urlSafeBase64 = {
    isSafe: (input) => /^[\w-]*$/.test(input),
    encode: (rawString) => {
        const encodedString = (0, env_1.isNode)()
            ? Buffer.from(rawString, 'utf8').toString('base64')
            : window.btoa(unescape(encodeURIComponent(rawString)));
        return replaceNonUrlSafeCharacters(encodedString);
    },
    decode: (encodedString) => {
        const nonUrlSafeEncodedString = restoreNonUrlSafeCharacters(encodedString);
        return (0, env_1.isNode)()
            ? Buffer.from(nonUrlSafeEncodedString, 'base64').toString('utf8')
            : decodeURIComponent(escape(window.atob(nonUrlSafeEncodedString)));
    },
    replaceNonUrlSafeCharacters,
    restoreNonUrlSafeCharacters,
};
