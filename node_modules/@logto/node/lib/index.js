var $C4LKF$logtoclient = require("@logto/client");
var $C4LKF$silverhandessentials = require("@silverhand/essentials");
var $C4LKF$nodefetch = require("node-fetch");
var $C4LKF$crypto = require("crypto");
var $C4LKF$jsbase64 = require("js-base64");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "default", () => $8c9551714715c14b$export$2e2bcd8739ae039);
$parcel$export(module.exports, "LogtoError", () => $8c9551714715c14b$re_export$LogtoError);
$parcel$export(module.exports, "OidcError", () => $8c9551714715c14b$re_export$OidcError);
$parcel$export(module.exports, "Prompt", () => $8c9551714715c14b$re_export$Prompt);
$parcel$export(module.exports, "LogtoRequestError", () => $8c9551714715c14b$re_export$LogtoRequestError);
$parcel$export(module.exports, "LogtoClientError", () => $8c9551714715c14b$re_export$LogtoClientError);
$parcel$export(module.exports, "ReservedScope", () => $8c9551714715c14b$re_export$ReservedScope);
$parcel$export(module.exports, "UserScope", () => $8c9551714715c14b$re_export$UserScope);



/** @link [Proof Key for Code Exchange by OAuth Public Clients](https://datatracker.ietf.org/doc/html/rfc7636) */ 

/**
 * @param length The length of the raw random data.
 */ const $5ffebdf4968dbe4e$var$generateRandomString = (length = 64)=>(0, $C4LKF$jsbase64.fromUint8Array)((0, $C4LKF$crypto.randomFillSync)(new Uint8Array(length)), true);
const $5ffebdf4968dbe4e$export$9ccd2716e53a229b = ()=>$5ffebdf4968dbe4e$var$generateRandomString();
const $5ffebdf4968dbe4e$export$cf1891f923f5943a = ()=>$5ffebdf4968dbe4e$var$generateRandomString();
const $5ffebdf4968dbe4e$export$414b01b1f867308a = async (codeVerifier)=>{
    const encodedCodeVerifier = new TextEncoder().encode(codeVerifier);
    const hash = (0, $C4LKF$crypto.createHash)("sha256");
    hash.update(encodedCodeVerifier);
    const codeChallenge = hash.digest();
    return (0, $C4LKF$jsbase64.fromUint8Array)(codeChallenge, true);
};



class $8c9551714715c14b$export$2e2bcd8739ae039 extends (0, ($parcel$interopDefault($C4LKF$logtoclient))) {
    constructor(config, adapter){
        super(config, {
            ...adapter,
            requester: (0, $C4LKF$logtoclient.createRequester)(config.appSecret ? async (...args)=>{
                const [input, init] = args;
                return (0, ($parcel$interopDefault($C4LKF$nodefetch)))(input, {
                    ...init,
                    headers: {
                        Authorization: `basic ${Buffer.from(// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                        `${config.appId}:${config.appSecret}`, "utf8").toString("base64")}`,
                        ...init?.headers
                    }
                });
            } : (0, ($parcel$interopDefault($C4LKF$nodefetch)))),
            generateCodeChallenge: $5ffebdf4968dbe4e$export$414b01b1f867308a,
            generateCodeVerifier: $5ffebdf4968dbe4e$export$cf1891f923f5943a,
            generateState: $5ffebdf4968dbe4e$export$9ccd2716e53a229b
        });
    }
    getContext = async ({ getAccessToken: getAccessToken , resource: resource , fetchUserInfo: fetchUserInfo  } = {})=>{
        const isAuthenticated = await this.isAuthenticated();
        if (!isAuthenticated) return {
            isAuthenticated: isAuthenticated
        };
        const claims = await this.getIdTokenClaims();
        if (!getAccessToken) return {
            isAuthenticated: isAuthenticated,
            claims: claims,
            userInfo: (0, $C4LKF$silverhandessentials.conditional)(fetchUserInfo && await this.fetchUserInfo())
        };
        try {
            const accessToken = await this.getAccessToken(resource);
            return {
                isAuthenticated: isAuthenticated,
                claims: await this.getIdTokenClaims(),
                userInfo: (0, $C4LKF$silverhandessentials.conditional)(fetchUserInfo && await this.fetchUserInfo()),
                accessToken: accessToken
            };
        } catch  {
            return {
                isAuthenticated: false
            };
        }
    };
}


//# sourceMappingURL=index.js.map
