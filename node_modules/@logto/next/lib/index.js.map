{"mappings":"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","sources":["packages/next/src/index.ts","packages/next/src/storage.ts"],"sourcesContent":["import type { IncomingMessage } from 'http';\n\nimport type { GetContextParameters } from '@logto/node';\nimport NodeClient from '@logto/node';\nimport { withIronSessionApiRoute, withIronSessionSsr } from 'iron-session/next';\nimport type { GetServerSidePropsContext, GetServerSidePropsResult, NextApiHandler } from 'next';\n\nimport NextStorage from './storage';\nimport type { LogtoNextConfig } from './types';\n\nexport { ReservedScope, UserScope } from '@logto/node';\n\nexport type { LogtoContext } from '@logto/node';\n\nexport default class LogtoClient {\n  private navigateUrl?: string;\n  private storage?: NextStorage;\n  constructor(private readonly config: LogtoNextConfig) {}\n\n  handleSignIn = (\n    redirectUri = `${this.config.baseUrl}/api/logto/sign-in-callback`\n  ): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n      await nodeClient.signIn(redirectUri);\n      await this.storage?.save();\n\n      if (this.navigateUrl) {\n        response.redirect(this.navigateUrl);\n      }\n    }, this.ironSessionConfigs);\n\n  handleSignInCallback = (redirectTo = this.config.baseUrl): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n\n      if (request.url) {\n        await nodeClient.handleSignInCallback(`${this.config.baseUrl}${request.url}`);\n        await this.storage?.save();\n        response.redirect(redirectTo);\n      }\n    }, this.ironSessionConfigs);\n\n  handleSignOut = (redirectUri = this.config.baseUrl): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const nodeClient = this.createNodeClient(request);\n      await nodeClient.signOut(redirectUri);\n\n      request.session.destroy();\n      await this.storage?.save();\n\n      if (this.navigateUrl) {\n        response.redirect(this.navigateUrl);\n      }\n    }, this.ironSessionConfigs);\n\n  handleUser = (configs?: GetContextParameters) =>\n    this.withLogtoApiRoute((request, response) => {\n      response.json(request.user);\n    }, configs);\n\n  handleAuthRoutes =\n    (configs?: GetContextParameters): NextApiHandler =>\n    (request, response) => {\n      const { action } = request.query;\n\n      if (action === 'sign-in') {\n        return this.handleSignIn()(request, response);\n      }\n\n      if (action === 'sign-in-callback') {\n        return this.handleSignInCallback()(request, response);\n      }\n\n      if (action === 'sign-out') {\n        return this.handleSignOut()(request, response);\n      }\n\n      if (action === 'user') {\n        return this.handleUser(configs)(request, response);\n      }\n\n      response.status(404).end();\n    };\n\n  withLogtoApiRoute = (\n    handler: NextApiHandler,\n    config: GetContextParameters = {}\n  ): NextApiHandler =>\n    withIronSessionApiRoute(async (request, response) => {\n      const user = await this.getLogtoUserFromRequest(request, config);\n\n      // eslint-disable-next-line @silverhand/fp/no-mutating-methods\n      Object.defineProperty(request, 'user', { enumerable: true, get: () => user });\n\n      return handler(request, response);\n    }, this.ironSessionConfigs);\n\n  withLogtoSsr = <P extends Record<string, unknown> = Record<string, unknown>>(\n    handler: (\n      context: GetServerSidePropsContext\n    ) => GetServerSidePropsResult<P> | Promise<GetServerSidePropsResult<P>>,\n    configs: GetContextParameters = {}\n  ) =>\n    withIronSessionSsr(async (context) => {\n      const user = await this.getLogtoUserFromRequest(context.req, configs);\n      // eslint-disable-next-line @silverhand/fp/no-mutating-methods\n      Object.defineProperty(context.req, 'user', { enumerable: true, get: () => user });\n\n      return handler(context);\n    }, this.ironSessionConfigs);\n\n  private createNodeClient(request: IncomingMessage) {\n    this.storage = new NextStorage(request);\n\n    return new NodeClient(this.config, {\n      storage: this.storage,\n      navigate: (url) => {\n        this.navigateUrl = url;\n      },\n    });\n  }\n\n  private get ironSessionConfigs() {\n    return {\n      cookieName: `logto:${this.config.appId}`,\n      password: this.config.cookieSecret,\n      cookieOptions: {\n        secure: this.config.cookieSecure,\n        maxAge: 14 * 24 * 60 * 60,\n      },\n    };\n  }\n\n  private async getLogtoUserFromRequest(request: IncomingMessage, configs: GetContextParameters) {\n    const nodeClient = this.createNodeClient(request);\n\n    return nodeClient.getContext(configs);\n  }\n}\n","import type { IncomingMessage } from 'http';\n\nimport type { Storage, StorageKey } from '@logto/node';\n\nexport default class NextStorage implements Storage {\n  private sessionChanged = false;\n  constructor(private readonly request: IncomingMessage) {}\n\n  async setItem(key: StorageKey, value: string) {\n    this.request.session[key] = value;\n    this.sessionChanged = true;\n  }\n\n  async getItem(key: StorageKey) {\n    const value = this.request.session[key];\n\n    if (value === undefined) {\n      return null;\n    }\n\n    return String(value);\n  }\n\n  async removeItem(key: StorageKey) {\n    this.request.session[key] = undefined;\n    this.sessionChanged = true;\n  }\n\n  async save() {\n    if (!this.sessionChanged) {\n      return;\n    }\n\n    await this.request.session.save();\n    this.sessionChanged = false;\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}