{"mappings":";AAEA,eAAe,MAAM,CAAC;IAGpB,UAAU,eAAe;QACvB,IAAI,EAAE,YAAY,CAAC;KACpB;CACF;AAED,2BAA2B;IACzB,eAAe,EAAE,OAAO,CAAC;IACzB,MAAM,CAAC,EAAE,aAAa,CAAC;IACvB,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,EAAE,gBAAgB,CAAC;CAC7B,CAAC;AAEF,mCAAmC;IACjC,aAAa,CAAC,EAAE,OAAO,CAAC;IACxB,cAAc,CAAC,EAAE,OAAO,CAAC;IACzB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB,CAAC;AEXF,YAAY,EACV,aAAa,EACb,cAAc,EACd,WAAW,EACX,oBAAoB,EACpB,OAAO,EACP,UAAU,GACX,MAAM,eAAe,CAAC;AAEvB,OAAO,EACL,UAAU,EACV,SAAS,EACT,MAAM,EACN,iBAAiB,EACjB,gBAAgB,EAChB,aAAa,EACb,SAAS,GACV,MAAM,eAAe,CAAC;AAEvB,gCAAiC,SAAQ,UAAU;gBACrC,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,UAAU,GAAG,SAAS,CAAC;IA4BrF,UAAU,kDAIP,oBAAoB,KAAQ,QAAQ,YAAY,CAAC,CAiClD;CACH","sources":["packages/node/src/src/types.ts","packages/node/src/src/utils/generators.ts","packages/node/src/src/index.ts","packages/node/src/index.ts"],"sourcesContent":[null,null,null,"import type { LogtoConfig, ClientAdapter } from '@logto/client';\nimport BaseClient, { createRequester } from '@logto/client';\nimport { conditional } from '@silverhand/essentials';\nimport fetch from 'node-fetch';\n\nimport type { GetContextParameters, LogtoContext } from './types';\nimport { generateCodeChallenge, generateCodeVerifier, generateState } from './utils/generators';\n\nexport type { LogtoContext, GetContextParameters } from './types';\n\nexport type {\n  IdTokenClaims,\n  LogtoErrorCode,\n  LogtoConfig,\n  LogtoClientErrorCode,\n  Storage,\n  StorageKey,\n} from '@logto/client';\n\nexport {\n  LogtoError,\n  OidcError,\n  Prompt,\n  LogtoRequestError,\n  LogtoClientError,\n  ReservedScope,\n  UserScope,\n} from '@logto/client';\n\nexport default class LogtoClient extends BaseClient {\n  constructor(config: LogtoConfig, adapter: Pick<ClientAdapter, 'navigate' | 'storage'>) {\n    super(config, {\n      ...adapter,\n      requester: createRequester(\n        config.appSecret\n          ? async (...args: Parameters<typeof fetch>) => {\n              const [input, init] = args;\n\n              return fetch(input, {\n                ...init,\n                headers: {\n                  Authorization: `basic ${Buffer.from(\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    `${config.appId}:${config.appSecret}`,\n                    'utf8'\n                  ).toString('base64')}`,\n                  ...init?.headers,\n                },\n              });\n            }\n          : fetch\n      ),\n      generateCodeChallenge,\n      generateCodeVerifier,\n      generateState,\n    });\n  }\n\n  getContext = async ({\n    getAccessToken,\n    resource,\n    fetchUserInfo,\n  }: GetContextParameters = {}): Promise<LogtoContext> => {\n    const isAuthenticated = await this.isAuthenticated();\n\n    if (!isAuthenticated) {\n      return {\n        isAuthenticated,\n      };\n    }\n\n    const claims = await this.getIdTokenClaims();\n\n    if (!getAccessToken) {\n      return {\n        isAuthenticated,\n        claims,\n        userInfo: conditional(fetchUserInfo && (await this.fetchUserInfo())),\n      };\n    }\n\n    try {\n      const accessToken = await this.getAccessToken(resource);\n\n      return {\n        isAuthenticated,\n        claims: await this.getIdTokenClaims(),\n        userInfo: conditional(fetchUserInfo && (await this.fetchUserInfo())),\n        accessToken,\n      };\n    } catch {\n      return {\n        isAuthenticated: false,\n      };\n    }\n  };\n}\n"],"names":[],"version":3,"file":"index.d.ts.map"}